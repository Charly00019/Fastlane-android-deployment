
default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics(
      api_token: 'your_crashlytics_api_token', # Add your Crashlytics API token here
      build_secret: 'your_crashlytics_build_secret' # Add your Crashlytics build secret here
    )
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    # gradle(
    #   task: "bundle", # or "assemble", if you want to build an APK
    #   build_type: "release",
    #   properties: {
    #     "android.injected.signing.store.file" => "C:\\Users\\law\\Desktop\\DEVOPS\\fastlane\\my-release-key.jks",
    #     "android.injected.signing.store.password" => "fastlane",
    #     "android.injected.signing.key.alias" => "lappiahnuamah",
    #     "android.injected.signing.key.password" => "fastlane",
    #   }  
    # )
    gradle(task: "clean assembleRelease")
    # upload_to_play_store(
    #   json_key: "../../sa.json",
    #   package_name: "com.devops.app",
    #   track: "internal",
    # )
    supply(
    json_key: "../../sa.json",
    package_name: "com.devops.app",
    aab: 
    skip_upload_metadata: false,
    skip_upload_images: false,
    skip_upload_screenshots: false,
    track: "production",
    # release_status: "completed"
  )
  end

  desc "Assemble and upload to the Play Store"
  lane :playstore do
    gradle(
      task: 'assemble',
      build_type: 'Release'
    )
    upload_to_play_store(
      track: 'internal',
      json_key: "../../sa.json"
    )
  end


  desc "Increment version code"
  lane :increment_vc do
    increment_version_code(
      gradle_file_path: "./app/build.gradle"
    )
  end
end



# default_platform(:android)

# platform :android do  
#   lane :alpha_appbundle do
#     upload_to_play_store(      
#       track: 'alpha',
#       aab: '../build/app/outputs/bundle/release/app-release.aab',
#     )
#   end

#   lane :production_appbundle do
#     upload_to_play_store(      
#       track: 'production',
#       aab: '../build/app/outputs/bundle/release/app-release.aab',
#     )
#   end

#   lane :alpha_apk do
#     upload_to_play_store(      
#       track: 'alpha',
#       apk: '../build/app/outputs/apk/release/app-release.apk',
#     )
#   end

#   lane :production_apk do
#     upload_to_play_store(      
#       track: 'production',
#       apk: '../build/app/outputs/apk/release/app-release.apk',
#     )
#   end

#   lane :gp_promote_alpha_beta do
#     upload_to_play_store(      
#       track: 'alpha',
#       skip_upload_apk: true,
#       skip_upload_aab: true,
#       skip_upload_metadata: true,
#       skip_upload_changelogs: true,
#       skip_upload_images: true,
#       skip_upload_screenshots: true,
#       track_promote_to: 'beta',
#     )
#   end

#   lane :gp_promote_alpha_production do
#     upload_to_play_store(      
#       track: 'alpha',
#       skip_upload_apk: true,
#       skip_upload_aab: true,
#       skip_upload_metadata: true,
#       skip_upload_changelogs: true,
#       skip_upload_images: true,
#       skip_upload_screenshots: true,
#       track_promote_to: 'production',
#     )
#   end

#   lane :gp_promote_beta do
#     upload_to_play_store(      
#       track: 'beta',
#       skip_upload_apk: true,
#       skip_upload_aab: true,
#       skip_upload_metadata: true,
#       skip_upload_changelogs: true,
#       skip_upload_images: true,
#       skip_upload_screenshots: true,
#       track_promote_to: 'production',
#     )
#   end
# end
