import java.util.Properties
import java.io.FileInputStream
import java.io.FileOutputStream

plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('../key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    println "Keystore properties loaded successfully"
    println "keyAlias: ${keystoreProperties['keyAlias']}"
    println "storeFile: ${keystoreProperties['storeFile']}"
} else {
    println "Keystore properties file not found"
}

def versionProperties = new Properties()
def versionPropertiesFile = rootProject.file('../version.properties')
if (versionPropertiesFile.exists()) {
    versionPropertiesFile.withReader('UTF-8') { reader ->
        versionProperties.load(reader)
    }
    println "Version properties loaded successfully"
    println "flutterVersionCode: ${versionProperties['flutter.versionCode']}"
    println "flutterVersionName: ${versionProperties['flutter.versionName']}"
} else {
    println "Version properties file not found"
}

def flutterVersionCode = versionProperties.getProperty("flutter.versionCode", "1").toInteger()
def flutterVersionName = versionProperties.getProperty("flutter.versionName", "1.0")

println "Flutter Version Code: $flutterVersionCode"
println "Flutter Version Name: $flutterVersionName"

android {
    namespace = "com.devops.new_app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.devops.new_app"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode flutterVersionCode
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}